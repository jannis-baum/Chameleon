#!/usr/bin/env python3

import argparse
from typing import Any

import yaml

from lib.colors import color2str, ranked_matches, str2color
from lib.config import config_schema
from lib.data import Highlight

def kitty_colors(term2true: dict[int, tuple[int, int]]) -> tuple[str, str]:
    def mode(i: int) -> str:
        return '\n'.join([
            f'color{term} {color2str(true[i])}' for term, true in term2true.items()
        ])
    return (mode(0), mode(1))

def main(config: dict[str, Any]):
    # 256-color -> (dark-24bit, light-24bit)
    term2true: dict[int, tuple[int, int]] = dict()
    # and the other way around
    true2term: dict[tuple[int, int], int] = dict()
    # group -> 256-color
    group2hl: dict[str, Highlight] = dict()

    def color_for(color_def: dict[str, str]) -> int:
        dl = (str2color(color_def['dark']), str2color(color_def['light']))
        if dl in true2term:
            i = true2term[dl]
        else:
            matches = ranked_matches(*dl)
            try:
                i = next(m for m in matches if not m in term2true)
            except:
                raise Exception('you can only use 256 colors in total')
            term2true[i] = dl
            true2term[dl] = i
        return i

    for color_def in config['vim']['colors']:
        hl = Highlight(
            color_for(color_def['fg']) if 'fg' in color_def else None,
            color_for(color_def['bg']) if 'bg' in color_def else None,
            color_def.get('deco'),
            color_for(color_def['ul']) if 'ul' in color_def else None,
        )
        for group in color_def['groups']:
            group2hl[group] = hl

    kitty_dark, kitty_light = kitty_colors(term2true)
    print(kitty_dark)
    print(kitty_light)
    for group, hl in group2hl.items():
        print(hl.vim(group))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('file')

    args = parser.parse_args()
    with open(args.file, 'r') as fp:
        config = config_schema(yaml.safe_load(fp))
        main(config)
