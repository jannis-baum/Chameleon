#!/usr/bin/env python3

import argparse
from typing import Any

import yaml

from lib.colors import color2str, ranked_matches, str2color
from lib.config import config_schema

def main(config: dict[str, Any]):
    # 256-color -> (dark-24bit, light-24bit)
    colors: dict[int, tuple[str, str]] = dict()
    # group -> 256-color
    hl: dict[str, int] = dict()

    for color_def in config['vim']['colors']:
        groups = color_def['groups']
        dark = str2color(color_def['dark'])
        light = str2color(color_def['light'])

        matches = ranked_matches(dark, light)
        try:
            i = next(m for m in matches if not m in colors)
        except:
            raise Exception('you can only use 256 colors in total')
        colors[i] = (color2str(dark), color2str(light))
        for group in groups: hl[group] = i

    print(colors)
    print(hl)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('file')

    args = parser.parse_args()
    with open(args.file, 'r') as fp:
        config = config_schema(yaml.safe_load(fp))
        main(config)
